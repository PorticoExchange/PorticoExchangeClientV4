lightningd (0.12.1ubuntu1) stable; urgency=medium

  * Updated to v0.12.1

 -- Christian Decker <cdecker@nox>  Fri, 07 Oct 2022 12:19:31 +0200

lightningd (0.11.1ubuntu1) stable; urgency=medium

  * connectd: make sure we don't keep stale reconnections around. (#5256)
  * connectd: fix assert which we could trigger. (#5256)

 -- Christian Decker <cdecker@blockstream.com>  Wed, 18 May 2022 12:04:12 +0200

lightningd (0.11.0.1ubuntu2) stable; urgency=medium

  * Protocol: we now support opening multiple channels with the same peer. (#5078)
  * Protocol: we send/receive IP addresses in init, and send updated node_announcement when two peers report the same remote_addr (disable-ip-discovery suppresses this announcement). (#5052)
  * Protocol: we more aggressively send our own gossip, to improve propagation chances. (#5200)
  * Plugins: cln-grpc first class GRPC interface for remotely controlling nodes over mTLS authentication; set grpc-port to activate (#5013)
  * Database: With the sqlite3:// scheme for --wallet option, you can now specify a second file path for real-time database backup by separating it from the main file path with a : character. (#4890)
  * Protocol: pay (and decode, etc) supports bolt11 payment_metadata a-la lightning/bolts#912 (#5086)
  * JSON-RPC: invoice has a new parameter deschashonly to put hash of description in bolt11. (#5121)
  * JSON-RPC: pay has new parameter description, will be required if bolt11 only has a hash. (#5122)
  * JSON-RPC: pay has new parameter maxfee for setting absolute fee (instead of using maxfeepercent and/or exemptfee) (#5122)
  * JSON-RPC: listforwards has new entry style, currently "legacy" or "tlv". (#5146)
  * JSON-RPC: delinvoice has a new parameter desconly to remove description. (#5121)
  * JSON-RPC: new setchannel command generalizes setchannelfee: you can now alter the htlc_minimum_msat and htlc_maximum_msat your node advertizes. (#5103)
  * Config: htlc-minimum-msat and htlc-maximum-msat to set default values to advertizes for new channels. (#5136)
  * JSON-RPC: listpeers now includes a pushed_msat value. For leased channels, is the total lease_fee. (#5043)
  * JSON-RPC: getinfo result now includes our_features (bits) for various Bolt #9 contexts (#5047)
  * Docker build for ARM defaults to bitcoin, but can be overridden with the LIGHTNINGD_NETWORK envvar. (#4896)
  * Developer: A new Rust library called cln-rpc can be used to interact with the JSON-RPC (#5010)
  * JSON-RPC: A new msggen library allows easy generation of language bindings for the JSON-RPC from the JSON schemas (#5010)
  * JSON-RPC: listchannels now includes the funding_outnum (#5016)
  * JSON-RPC: coin_movement to 'external' accounts now include an 'originating_account' field (#5019)
  * JSON-RPC: Add exclude option for pay command to manually exclude channels or nodes when finding a route. (#4906)
  * Database: Speed up loading of pending HTLCs during startup by using a partial index. (#4925)
  * JSON-RPC: close by peer id will fail if there is more than one live channel (use channel_id or short_channel_id as id arg). (#5078)
  * JSON_RPC: sendcustommsg now works with any connected peer, even when shutting down a channel. (#4985)
  * JSON_RPC: ping now works with connected peers, even without a channel. (#4985)
  * cli: Addition of HSM specific error code in lightning-cli (#4908)
  * config: If the port is unspecified, the default port is chosen according to used network similarly to Bitcoin Core. (#4900)
  * Plugins: shutdown notification is now send when lightningd is almost completely shutdown, RPC calls then fail with error code -5. (#4897)
  * Protocol: signet addresses and invoices now use tbs instead of tb. (#4929)
  * JSON-RPC: pay for a bolt11 which uses a description_hash, without setting description. (#5122)
  * JSON-RPC: invoice expiry no longer allowed to be a string with suffix, use an integer number of seconds. (#5104)
  * JSON-RPC: fundpsbt/utxopsbt reserve must be a number, not bool (for true use 72/don't specify, for false use 0). Numbers have been allowed since v0.10.1. (#5104)
  * JSON-RPC: shutdown no longer allows p2pkh or p2sh addresses. (#5086)
  * JSON-RPC: sendpay route argument style "legacy" (don't use it at all, we ignore it now and always use "tlv" anyway). (#5120)
  * JSON-RPC: setchannelfee (use setchannel). (#5103)
  * JSON-RPC: legacypay (pay replaced it in 0.9.0). (#5122)
  * Protocol: support for legacy onion format removed, since everyone supports the new one. (#5058)
  * Protocol: ... but we still forward legacy HTLC onions for now. (#5146)
  * Plugins: The message field on the custommsg hook (deprecated in v0.10.0) (#4902)
  * JSON-RPC: fundchannel_complete txid and txout parameters (deprecated in v0.10.0) (#4902)
  * onchaind: we sometimes failed to close upstream htlcs if more than one HTLC is in flight during unilateral close. (#5130)
  * JSON-RPC: listpays always includes bolt11 or bolt12 field. (#5122)
  * cli: don't ask to confirm the password if the hsm_secret is already encrypted. (#5085)
  * cli: check if the hsm_secret password and the confirmation match from the command line (#5085)
  * JSON-RPC: connect notification now called even if we already have a live channel. (#5078)
  * docker: The docker image is now built with postgresql support (#5081)
  * hsmd: Fixed a significant memory leak (#5051)
  * closingd: more accurate weight estimation helps mutual closing near min/max feerates. (#5004)
  * Protocol: Always flush sockets to increase chance that final message get to peer (esp. error packets). (#4984)
  * JSON-RPC: listincoming showed incoming_capacity_msat field 1000 times actual value. (#4913)
  * Options: Respect --always-use-proxy AND --disable-dns when parsing wireaddresses to listen on. (#4829)
  * lightningd: remove slow memory leak in DEVELOPER builds. (#4931)
  * JSON-RPC: paystatus entries no longer have two identical amount_msat entries. (#4911)
  * We really do allow providing multiple addresses of the same type. (#4902)
  * Fixed experimental-websocket intermittent read errors (#5090)
  * Fixed experimental-websocket-port not to leave zombie processes. (#5101)
  * Config option --lease-fee-base-msat renamed to --lease-fee-base-sat (#5047)
  * Config option --lease-fee-base-msat deprecated and will be removed next release (#5047)
  * Fixed experimental-websocket-port to work with default addresses. (#4945)
  * Protocol: removed support for v0.10.1 onion messages. (#4921)
  * Protocol: Ability to announce DNS addresses (#4829)
  * Protocol: disabled websocket announcement due to LND propagation issues (#5200)

 -- Christian Decker <cdecker@nox>  Tue, 03 May 2022 16:08:08 +0200

lightningd (0.10.2ubuntu1) stable; urgency=medium

  * config: new option `--max-dust-htlc-exposure-msat`, which limits the total amount of sats to be allowed as dust on a channel ([#4837])
  * With `sqlite3` db backend we now use a 60-second busy timer, to allow backup processes like `litestream` to operate safely. ([#4867])
  * pay: Payment attempts are now grouped by the pay command that initiated them ([#4567])
  * JSON-RPC: `setchannelfee` gives a grace period (`enforcedelay`) before rejecting old-fee payments: default 10 minutes. ([#4806])
  * Support filtering `listpays` by their status. ([#4595])
  * `close` now notifies about the feeranges each side uses. ([#4784])
  * Protocol: We now send and support `channel_type` in channel open (not dual-funding though). ([#4616])
  * Protocol: We now perform quick-close if the peer supports it. ([#4599])
  * JSONRPC: `close` now takes a `feerange` parameter to set min/max fee rates for mutual close. ([#4599])
  * Protocol: Allow sending large HTLCs if peer offers `option_support_large_channel` (> 4294967295msat) ([#4599])
  * pyln-client: routines for direct access to the gossip store as Gossmap ([#4582])
  * Plugins: `shutdown` notification for clean exits. ([#4754])
  * Plugins: Added `channel_id` and `commitnum` to `commitment_revocation` hook ([#4760])
  * JSON-RPC: `datastore`, `deldatastore` and `listdatastore` for plugins to store simple persistent key/value data. ([#4674])
  * pay: The route selection will now use the log-propability-based channel selection to increase success rate and reduce time to completion ([#4771])
  * Plugins: `pay` now biases towards larger channels, improving success probability. ([#4771])
  * db: removal of old HTLC information and vacuuming shrinks large lightningd.sqlite3 by a factor of 2-3. ([#4850])
  * JSON-RPC: `ping` now only works if we have a channel with the peer. ([#4804])
  * Protocol: Send regular pings to detect dead connections (particularly for Tor). ([#4804])
  * Build: Python is now required to build, as generated files are no longer checked into the repository. ([#4805])
  * pyln-spec: updated to latest BOLT versions. ([#4763])
  * JSON-RPC: Change order parameters in the `listforwards` command ([#4668])
  * db: We now set a busy timeout to safely allow others to access sqlite3 db (e.g. litestream) ([#4554])
  * connectd: Try non-TOR connections first ([#4731])
  * Protocol: No longer restrict HTLCs to less than 4294967295msat ([#4599])
  * Change order of the `status` parameter in the `listforwards` rpc command. ([#4668])
  * RPC framework now requires the `"jsonrpc"` property inside the request. ([#4742])
  * Plugins: Renames plugin init `use_proxy_always` to `always_use_proxy` ([#4731])
  * peer: Fixed a crash when a connection is lost outside of a DB transaction ([#4894])
  * peer: We now no longer self-limit the number of file descriptors (which limits the number of channels) in sufficiently modern systems, or where we can access `/proc` or `/dev/fd`.  We still self-limit on old systems where we cannot find the list of open files on `/proc` or `/dev/fd`, so if you need > ~4000 channels, upgrade or mount `/proc`. ([#4872])
  * errors: Errors returning a `channel_update` no longer return an outdated one. ([#4876])
  * pay: `listpays` returns payments orderd by their creation date ([#4567])
  * pay: `listpays` no longer groups attempts from multiple attempts to pay an invoice ([#4567])
  * sqlite3: Relaxed the version match requirements to be at least a minimum version and a major version match ([#4852])
  * pay: `pay` would sometimes misreport a final state of `pending` instead of `failed` ([#4803])
  * Plugins: C plugins would could leak memory on every command (esp. seen when hammering topology's `listchannels`). ([#4737])
  * libplugin: Fatal error messages from `plugin_exit()` now logged in lightningd. ([#4754])
  * JSONRPC: `openchannel_signed` would fail on PSBT comparison of materially identical PSBTs ([#4752])
  * doc: `listnodes` fields now correctly documented. ([#4750])
  * experimental: crash for some users while requesting dual funding leases. ([#4751])
  * plugin: Don't drop complaints about silly channels to `stderr`. ([#4730])
  * connectd: Do not try address hint twice ([#4731])
  * peer: channel_upgrade draft upgraded: cannot upgrade channels until peers also upgrade. ([#4830])
  * bolt12: `chains` in `invoice_request` and invoice is deprecated, `chain` is used instead. ([#4849])
  * bolt12: `vendor` is deprecated: the field is now called `issuer`. ([#4849])
  * protocol: Updated `onion_message` support to match updated draft specification (with backwards compat for old version) ([#4800])
  * protocol: Anchor output mutual close allow a fee higher than the final commitment transaction (as per lightning-rfc #847) ([#4599])

 -- Christian Decker <cdecker@nox>  Wed, 03 Nov 2021 19:10:17 +0100

lightningd (0.10.1) stable; urgency=medium

  * JSON-RPC: `invoice` now outputs explicit `payment_secret` as its own field. ([#4646])
  * JSON-RPC: `listchannels` can be queried by `destination`. ([#4614])
  * JSON-RPC: `invoice` now gives `warning_private_unused` if unused unannounced channels could have provided sufficient capacity. ([#4585])
  * JSON-RPC: `withdraw`, `close` (and others) now accept taproot (and other future) segwit addresses. ([#4591])
  * JSON-RPC: HTLCs in `listpeers` are now annotated with a status if they are waiting on an `htlc_accepted` hook of a plugin. ([#4580])
  * JSON-RPC: `close` returns `type` "unopened" if it simply discards channel instead of empty object. ([#4501])
  * JSON-RPC: `listfunds` has a new `reserved_to_block` field. ([#4510])
  * JSON-RPC: `createonion` RPC command now accepts an optional `onion_size`. ([#4519])
  * JSON-RPC: new command `parsefeerate` which takes a feerate string and returns the calculated perkw/perkb ([#4639])
  * Protocol: `option_shutdown_anysegwit` allows future segwit versions on shutdown transactions. ([#4556])
  * Protocol: We now send and accept `option_shutdown_anysegwit` so you can close channels to v1+ segwit addresses. ([#4591])
  * Plugins: Plugins may now send custom notifications that other plugins can subscribe to. ([#4496])
  * Plugins: Add `funder` plugin, which allows you to setup a policy for funding v2 channel open requests. Requres --experimental-dual-fund option ([#4489])
  * Plugins: `funder` plugin includes command `funderupdate` which will show current funding configuration and allow you to modify them ([#4489])
  * Plugins: Restart plugin on `rescan` when binary was changed. ([#4609])
  * keysend: `keysend` can now reach non-public nodes by providing the `routehints` argument if they are known. ([#4611])
  * keysend: You can now add extra TLVs to a payment sent via `keysend` ([#4610])
  * config: `force_feerates` option to allow overriding feerate estimates (mainly for regtest). ([#4629])
  * config: New option `log-timestamps` allow disabling of timestamp prefix in logs. ([#4504])
  * hsmtool: allow piped passwords ([#4571])
  * libhsmd: Added python bindings for `libhsmd` ([#4498])
  * libhsmd: Extracted the `hsmd` logic into its own library for other projects to use ([#4497])
  * lightningd: we now try to restart if subdaemons are upgraded underneath us. ([#4471])
  * JSON-RPC: `invoice` now allows creation of giant invoices (>= 2^32 msat) ([#4606])
  * JSON-RPC: `invoice` warnings are now better defined, and `warning_mpp_capacity` is no longer included (since `warning_capacity` covers that). ([#4585])
  * JSON-RPC: `getroute` is now implemented in a plugin. ([#4585])
  * JSON-RPC: `sendonion` no longer requires the gratuitous `direction` and `channel` fields in the `firsthop` parameter. ([#4537])
  * JSON-RPC: moved dev-sendcustommsg to sendcustommsg ([#4650])
  * JSON-RPC: `listpays` output is now ordered by the `created_at` timestamp. ([#4518])
  * JSON-RPC: `listsendpays` output is now ordered by `id`. ([#4518])
  * JSON-RPC: `autocleaninvoice` now returns an object, not a raw string. ([#4501])
  * JSON-RPC: `fundpsbt` will not include UTXOs that aren't economic (can't pay for their own fees), unless 'all' ([#4509])
  * JSON-RPC: `close` now always returns notifications on delays. ([#4465])
  * Protocol: All new invoices require a `payment_secret` (i.e. modern TLV format onion) ([#4646])
  * Protocol: Allow out-of-bound fee updates from peers, as long as they're not getting *worse* ([#4681])
  * Protocol: We can no longer connect to peers which don't support `payment_secret`. ([#4646])
  * Protocol: We will now reestablish and negotiate mutual close on channels we've already closed (great if peer has lost their database). ([#4559])
  * Protocol: We now assume nodes support TLV onions (non-legacy) unless we have a `node_announcement` which says they don't. ([#4646])
  * Protocol: Use a more accurate fee for mutual close negotiation. ([#4619])
  * Protocol: channel feerates reduced to bitcoind's "6 block ECONOMICAL" rate. ([#4507])
  * keysend now uses 22 for the final CLTV, making it rust-lightning compatible. ([#4548])
  * Plugins: `fundchannel` and `multifundchannel` will now reserve funding they use for 2 weeks instead of 12 hours. ([#4510])
  * Plugins: we now always send `allow-deprecated-apis` in getmanifest. ([#4465])
  * lightningd: `enable-autotor-v2-mode` option.  Use v3.  See https://blog.torproject.org/v2-deprecation-timeline. ([#4549])
  * lightningd: v2 Tor addresses.  Use v3.  See https://blog.torproject.org/v2-deprecation-timeline. ([#4549])
  * JSON-RPC: `listtransactions` `outputs` `satoshis` field (use `msat` instead). ([#4594])
  * JSON-RPC: `listfunds` `channels` `funding_allocation_msat` and `funding_msat`: use `funding`. ([#4594])
  * JSON-RPC: `listfunds` `channels` `last_tx_fee`: use `last_tx_fee_msat`. ([#4594])
  * JSON-RPC: `listfunds` `channels` `closer` is now omitted if it does not apply, not JSON `null`. ([#4594])
  * JSON-RPC: `newaddr` no longer includes `address` field (deprecated in 0.7.1) ([#4465])
  * pyln: removed deprecated `fundchannel`/`fundchannel_start` `satoshi` arg. ([#4465])
  * pyln: removed deprecated pay/sendpay `description` arg. ([#4465])
  * pyln: removed deprecated close `force` variant. ([#4465])
  * JSON-RPC: `listinvoice` no longer crashes if given an invalid (or bolt12) `invstring` argument. ([#4625])
  * JSON-RPC: `listconfigs` would list some boolean options as strings `"true"` or `"false"` instead of using JSON booleans. ([#4594])
  * Protocol: don't ever send 0 `fee_updates` (regtest bug). ([#4629])
  * Protocol: We could get stuck on signature exchange if we needed to retransmit the final `revoke_and_ack`. ([#4559])
  * Protocol: Validate chain hash for `gossip_timestamp_filter` messages ([#4514])
  * Protocol: We would sometimes gratuitously disconnect 30 seconds after an HTLC failed. ([#4550])
  * Protocol: handle complex feerate transitions correctly. ([#4480])
  * Protocol: Don't create more than one feerate change at a time, as this seems to desync with LND. ([#4480])
  * Build: Fixes `make full-check` errors on macOS ([#4613])
  * Build: Fixes `make` with `--enable-developer` option on macOS. ([#4613])
  * Docs: Epic documentation rewrite: each now lists complete and accurate JSON output, tested against testsuite. ([#4594])
  * Config: `addr` autotor and statictor /torport arguments now advertized correctly. ([#4603])
  * pay: Fixed an issue when filtering routehints when we can't find ourselves in the local network view. ([#4581])
  * pay: The presplitter mod will no longer exhaust the HTLC budget. ([#4563])
  * pay: Fix occasional crash paying an invoice with a routehint to us. ([#4555])
  * Compat: Handle windows-style newlines and other trailing whitespaces correctly in bitcoin-cli interface ([#4502])
  * bolt12 decode `timestamp` field deprecated in favor of new name `created_at`. ([#4669])
  * JSON-RPC: `listpeers` now includes the `scratch_txid` for every inflight (if is a dual-funded channel) ([#4521])
  * JSON-RPC: for v2 channels, we now list the inflights information for a channel ([#4521])
  * JSON-RPC: `fetchinvoice` can take a payer note, and `listinvoice` will show the `payer_notes` received. ([#4625])
  * JSON-RPC: `fetchinvoice` and `sendinvoice` will connect directly if they can't find an onionmessage route. ([#4625])
  * JSON-RPC: `openchannel_init` now takes a `requested_amt`, which is an amount to request from peer ([#4639])
  * JSON-RPC: `fundchannel` now takes optional `request_amt` parameter ([#4639])
  * JSON-RPC: `fundchannel`, `multifundchannel`, and `openchannel_init` now accept a `compact_lease` for any requested funds ([#4639])
  * JSON-RPC: close now has parameter to force close a leased channel (`option_will_fund`) ([#4639])
  * JSON-RPC: `listnodes` now includes the `lease_rates`, if available ([#4639])
  * JSON-RPC: new RPC `setleaserates`, for passing in the rates to advertise for a channel lease (`option_will_fund`) ([#4639])
  * JSON-RPC: `decode` now gives a `valid` boolean (it does partial decodes of some invalid data). ([#4501])
  * JSON-RPC: `listoffers` now shows `local_offer_id` when listing all offers. ([#4625])
  * Protocol: we can now upgrade old channels to `option_static_remotekey`. See https://github.com/lightningnetwork/lightning-rfc/pull/868 ([#4532])
  * Protocol: we support the quiescence protocol from https://github.com/lightningnetwork/lightning-rfc/pull/869 ([#4520])
  * Protocol: Replaces `init_rbf`'s `fee_step` for RBF of v2 opens with `funding_feerate_perkw`, breaking change ([#4648])
  * Protocol: BOLT12 offers can now be unsigned, for really short QR codes. ([#4625])
  * Protocol: offer signature format changed. ([#4630])
  * Plugins: `rbf_channel` hook has `channel_max_msat` parameter ([#4489])
  * Plugins: `openchannel2` hook now includes optional fields for a channel lease request ([#4639])
  * Plugins: add a `channel_max_msat` value to the `openchannel2` hook. Tells you the total max funding this channel is allowed to have. ([#4489])
  * funder: `funderupdate` command to view and update params for contributing our wallet funds to v2 channel openings. Provides params for enabling `option_will_fund`. ([#4664])

 -- Christian Decker <decker@blockstream.io>  Mon, 08 Aug 2021 14:00:00 +0200

lightningd (0.10.0) stable; urgency=medium

  * Protocol: we treat error messages from peer which refer to "all channels" as warnings, not errors. ([#4364])
  * Protocol: we now report the new (draft) warning message. ([#4364])
  * JSON-RPC: `connect` returns `address` it actually connected to ([#4436])
  * JSON-RPC: `connect` returns "direction" ("in": they initiated, or "out": we initiated) ([#4452])
  * JSON-RPC: `txprepare` and `withdraw` now return a `psbt` field. ([#4428])
  * JSON-RPC: `fundchannel_complete` takes a psbt parameter. ([#4428])
  * pay: `pay` will now remove routehints that are unusable due to the entrypoint being unknown or unreachable. ([#4404])
  * Plugins: `peer_connected` hook and `connect` notifications have "direction" field. ([#4452])
  * Plugins: If there is a misconfiguration with important plugins we now abort early with a more descriptive error message. ([#4418])
  * pyln: Plugins that are run from the command line print helpful information on how to configure c-lightning to include them and print metadata about what RPC methods and options are exposed. ([#4419])
  * JSON-RPC: `listpeers` now shows latest feerate and unilateral close fee. ([#4407])
  * JSON-RPC: `listforwards` can now filter by status, in and out channel. ([#4349])
  * JSON-RPC: Add new parameter `excess_as_change` to fundpsbt+utxopsbt ([#4368])
  * JSON-RPC: `addgossip` allows direct injection of network gossip messages. ([#4361])
  * pyln-testing: The RPC client will now pretty-print requests and responses to facilitate log-based debugging. ([#4357])
  * Plugins: the `rpc_command` hook is now chainable. ([#4384])
  * JSON-RPC: If bitcoind won't give a fee estimate in regtest, use minimum. ([#4405])
  * Protocol: we use `sync_complete` for gossip range query replies, with detection for older spec nodes. ([#4389])
  * Plugins: `peer_connected` rejections now send a warning, not an error, to the peer. ([#4364])
  * Protocol: we now send warning messages and close the connection, except on unrecoverable errors. ([#4364])
  * JSON-RPC: `sendpay` no longer extracts updates from errors, the caller should do it from the `raw_message`. ([#4361])
  * Plugins: `peer_connected` hook is now chainable ([#4351])
  * Plugins: `custommsg` hook is now chainable ([#4358])
  * JSON-RPC: `fundchannel_complete` `txid` and `txout` parameters (use `psbt`) ([#4428])
  * Plugins: The `message` field on the `custommsg` hook is deprecated in favor of the `payload` field, which skips the internal prefix. ([#4394])
  * `bcli` replacements must allow `allowhighfees` argument (deprecated 0.9.1). ([#4362])
  * `listsendpays` will no longer add `amount_msat` `null` (deprecated 0.9.1). ([#4362])
  * Protocol: overzealous close when peer sent more HTLCs than they'd told us we could send. ([#4432])
  * pay: Report the correct decoding error if bolt11 parsing fails. ([#4404])
  * pay: `pay` will now abort early if the destination is not reachable directly nor via routehints. ([#4404])
  * pay: `pay` was reporting in-flight parts as failed ([#4404])
  * pay: `pay` would crash on corrupt gossip store, which (if version was ever wrong) we'd corrupt again ([#4453])
  * pyln: Fixed an error when calling `listfunds` with an older c-lightning version causing an error about an unknown `spent` parameter ([#4417])
  * Plugins: `dev-sendcustommsg` included the type and length prefix when sending a message. ([#4413])
  * Plugins: The `custommsg` hook no longer includes the internal type prefix and length prefix in its `payload` ([#4394])
  * db: Fixed an access to a NULL-field in the `channel_htlcs` table and resulting warning. ([#4378])
  * pay: Payments with an empty route (self-payment) are now aborted. ([#4379])
  * Protocol: always accept channel_updates from errors, even they'd otherwise be rejected as spam. ([#4361])
  * connectd: Occasional crash in connectd due to use-after-free ([#4360])
  * lightningd: JSON failures when --daemon is used without --log-file. ([#4350])
  * lightningd: don't assert if time goes backwards temporarily. ([#4449])
  * lightningd: `experimental-dual-fund` runtime flag will enable dual-funded protocol on this node ([#4427])
  * lightningd: `experimental-shutdown-wrong-funding` to allow remote nodes to close incorrectly opened channels. ([#4421])
  * JSON-RPC: close has a new `wrong_funding` option to try to close out unused channels where we messed up the funding tx. ([#4421])
  * JSON-RPC: Permit user-initiated aborting of in-progress opens. Only valid for not-yet-committed opens and RBF-attempts ([#4424])
  * JSON-RPC: `listpeers` now includes 'last_feerate', 'next_feerate', 'initial_feerate' and 'next_fee_step' for channels in state DUALOPEND_AWAITING_LOCKIN ([#4399])

 -- Christian Decker <cdecker@nox>  Fri, 09 Apr 2021 14:12:32 +0200

lightningd (0.9.3) stable; urgency=medium

  * JSON-RPC: The listfunds method now includes spent outputs if the spent parameter is set to true. (#4296)
  * JSON-RPC: The status of the shutdown meesages being exchanged is now displayed correctly. (#4263)
  * JSON-RPC: createinvoice new low-level invoice creation API. (#4256)
  * JSON-RPC: fundpsbt/utxopsbt have new param, min_witness_utxo, which sets a floor for the weight calculation of an added input (#4211)
  * JSON-RPC: invalid UTF-8 strings now rejected. (#4227)
  * JSON-RPC: invoice now takes an optional cltv parameter. (#4320)
  * JSON-RPC: listinvoices can now query for an invoice matching a payment_hash or a bolt11 string, in addition to label (#4312)
  * JSON-RPC: setchannelfee would fail an assertion if channel wasn't in normal state. (#4282)
  * bitcoin: The default network was changed from "testnet" to "mainnet", this only affects new nodes (#4277)
  * cli: lightning-cli now performs better sanity checks on the JSON-RPC requests it sends. (#4259)
  * db: Fixed a performance regression during block sync, resulting in many more queries against the DB than necessary. (#4319)
  * db: Speed up deletion of peer especially when there is a long history with that peer. (#4337)
  * docs: doc/BACKUP.md describes how to back up your C-lightning node. (#4207)
  * experimental-offers: enables fetch, payment and creation of (early draft) offers. (#4328)
  * experimental-onion-messages enables send, receive and relay of onion messages. (#4328)
  * fee_base and fee_ppm to listpeers (#4247)
  * hsmd: we now error at startup on invalid hsm_secret (#4307)
  * hsmtool: all commands now error on invalid hsm_secret (#4307)
  * hsmtool: fix a segfault on dumponchaindescriptors without network parameter (#4341)
  * hsmtool: password must now be entered on stdin. Password passed on the command line are discarded. (#4303)
  * hsmtool: the encrypt now asks you to confirm your password (#4307)
  * hsmtool: the generatehsm command now generates an appropriately-sized hsm_secret (#4304)
  * keysend: Keysend now checks whether the destination supports keysend before attempting a payment. If not a more informative error is returned. (#4236)
  * libplugin: init can return a non-NULL string to disable the plugin. (#4328)
  * lightningd: the --encrypted-hsm now asks you to confirm your password when first set (#4307)
  * log: Do not terminate on the second received SIGHUP. (#4243)
  * onchaind is much faster when unilaterally closing old channels. (#4250)
  * onchaind uses much less memory on unilateral closes for old channels. (#4250)
  * pay: Fixed an issue where waiting for the blockchain height to sync could time out. (#4317)
  * plugins: Multiple plugins can now register db_write hooks. (#4220)
  * plugins: more than one plugin can now register invoice_payment hook. (#4226)
  * plugins: new "multi" field allows an option to be specified multiple times. (#4278)
  * plugins: options to init are no longer given as strings if they are bool or int types (deprecated in 0.8.2). (#4278)
  * plugins: plugins can now disable themselves by returning disable, even if marked important. (#4328)
  * plugins: start command can now take plugin-specific parameters. (#4278)
  * pyln-client: fundpsbt/utxopsbt now support min_witness_weight param (#4295)
  * pyln: Added support for command notifications to LightningRpc via the notify context-manager. (#4311)
  * pyln: Millisatoshi has new method, to_whole_satoshi; rounds value up to the nearest whole satoshi (#4295)
  * pyln: Plugin methods can now report progress or status via the Request.notify function (#4311)
  * pyln: parsing msat from a float string (#4237)
  * pyln: plugins can now raise RpcException for finer control over error returns. (#4279)
  * pyln: txprepare no longer supports the deprecated destination satoshi feerate utxos call format. (#4259)

 -- Christian Decker <cdecker@nox>  Wed, 20 Jan 2021 17:39:02 +0100

lightningd (0.9.2) stable; urgency=medium

  * Note: PSBTs now require bitcoind v0.20.1 or above
  * Added (JSON-RPC): Added 'state_changes' history to listpeers channels ([4126](https://github.com/ElementsProject/lightning/pull/4126))
  * Added (JSON-RPC): Added 'opener' and 'closer' to listpeers channels ([4126](https://github.com/ElementsProject/lightning/pull/4126))
  * Added (JSON-RPC): `close` now sends notifications for slow closes (if `allow-deprecated-apis`=false) ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Added (JSON-RPC): `notifications` command to enable notifications. ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Added (JSON-RPC): `multifundchannel` has a new optional argument, 'commitment_feerate', which can be used to differentiate between the funding feerate and the channel's initial commitment feerate ([4139](https://github.com/ElementsProject/lightning/pull/4139))
  * Added (JSON-RPC) `fundchannel` now accepts an optional 'close_to' param, a bitcoin address that the channel funding should be sent to on close. Requires `opt_upfront_shutdownscript` ([4132](https://github.com/ElementsProject/lightning/pull/4132))
  * Added (Plugins): Channel closure resaon/cause to channel_state_changed notification ([4126](https://github.com/ElementsProject/lightning/pull/4126))
  * Added (Plugins): `htlc_accepted` hook can now return custom `failure_onion`. ([4187](https://github.com/ElementsProject/lightning/pull/4187))
  * Added (Plugins): hooks can now specify that they must be called 'before' or 'after' other plugins. ([4168](https://github.com/ElementsProject/lightning/pull/4168))
  * Added (hsmtool): a new command was added to hsmtool for dumping descriptors of the onchain wallet ([4171](https://github.com/ElementsProject/lightning/pull/4171))
  * Added (hsmtool): `hsm_secret` generation from a seed-phrase following BIP39. ([4065](https://github.com/ElementsProject/lightning/pull/4065))
  * Added (cli): print notifications and progress bars if commands provide them. ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Added (pyln-client): pyln.client handles and can send progress notifications. ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Added (pyln-client): Plugin method and hook requests prevent the plugin developer from accidentally setting the result multiple times, and will raise an exception detailing where the result was first set. ([4094](https://github.com/ElementsProject/lightning/pull/4094))
  * Added (pyln-client): Plugins have been integrated with the `logging` module for easier debugging and error reporting. ([4101](https://github.com/ElementsProject/lightning/pull/4101))
  * Added (pyln-proto): Added pure python implementation of the sphinx onion creation and processing functionality. ([4056](https://github.com/ElementsProject/lightning/pull/4056))
  * Added (libplugin): routines to send notification updates and progress. ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Added (build): clang build now supports --enable-address-sanitizer . ([4013](https://github.com/ElementsProject/lightning/pull/4013))
  * Added (db): Added support for key-value DSNs for postgresql, allowing for a wider variety of configurations and environments. ([4072](https://github.com/ElementsProject/lightning/pull/4072))
  * Changed (Plugins): `pay` will now try disabled channels as a last resort. ([4093](https://github.com/ElementsProject/lightning/pull/4093))
  * Changed (Protocol): mutual closing feerate reduced to "slow" to avoid overpaying. ([4113](https://github.com/ElementsProject/lightning/pull/4113))
  * Changed In-memory log buffer reduced from 100MB to 10MB ([4087](https://github.com/ElementsProject/lightning/pull/4087))
  * Deprecated (cli): scripts should filter out '^# ' or use `-N none`, as commands will start returning notifications soon ([4046](https://github.com/ElementsProject/lightning/pull/4046))
  * Removed (Protocol): Support for receiving full gossip from ancient LND nodes. ([4184](https://github.com/ElementsProject/lightning/pull/4184))
  * Removed (JSON-RPC): `plugin stop` result with an empty ("") key (deprecated 0.8.1) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Removed (JSON-RPC): The hook `rpc_command` returning `{"continue": true}` (deprecated 0.8.1) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Removed (JSON-RPC): The hook `db_write` can no longer return `true` (deprecated in 0.8.1) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Removed (JSON-RPC): `htlc_accepted` hook `per_hop_v0` object removed (deprecated 0.8.0) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Removed (JSON-RPC): `listconfigs` duplicated "plugin" paths (deprecated 0.8.0) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Removed (Plugin): Relative plugin paths are not relative to startup (deprecated v0.7.2.1) ([4049](https://github.com/ElementsProject/lightning/pull/4049))
  * Fixed (Network): Fixed a race condition when us and a peer attempt to make channels to each other at nearly the same time. ([4116](https://github.com/ElementsProject/lightning/pull/4116))
  * Fixed (Protocol): fixed retransmission order of multiple new HTLCs (causing channel close with LND) ([4124](https://github.com/ElementsProject/lightning/pull/4124))
  * Fixed (Protocol): `signet` is now compatible with the final bitcoin-core version ([4078](https://github.com/ElementsProject/lightning/pull/4078))
  * Fixed (Crash): assertion fail at restart when source and destination channels of an HTLC are both onchain. ([4122](https://github.com/ElementsProject/lightning/pull/4122))
  * Fixed We are now able to parse any amount string (XXXmsat, XX.XXXbtc, ..) we create. ([4129](https://github.com/ElementsProject/lightning/pull/4129))
  * Fixed Some memory leaks in transaction and PSBT manipulate closed. ([4071](https://github.com/ElementsProject/lightning/pull/4071))
  * Fixed openingd now uses the correct dust limit for determining the allowable floor for a channel open (affects fundee only) ([4141](https://github.com/ElementsProject/lightning/pull/4141))
  * Fixed (Plugin): Regression with SQL statement expansion that could result in invalid statements being passed to the `db_write` hook. ([4090](https://github.com/ElementsProject/lightning/pull/4090))
  * Fixed (build): no longer spuriously regenerates generated sources due to differences in `readdir`(3) sort order. ([4053](https://github.com/ElementsProject/lightning/pull/4053))
  * Fixed (db): Fixed a broken migration on postgres DBs that had really old channels. ([4064](https://github.com/ElementsProject/lightning/pull/4064))

 -- Christian Decker <decker.christian@gmail.com>  Mon, 30 Nov 2020 12:19:01 +0100

lightningd (0.9.1) stable; urgency=medium

  * Added (JSON-RPC): `multiwithdraw` command to batch multiple onchain sends in a single transaction.  Note it shuffles inputs and outputs, does not use BIP69.
  * Added (JSON-RPC): `multifundchannel` command to fund multiple channels to different peers all in a single onchain transaction.
  * Added (JSON-RPC): `delpay` command to delete a payment once completed or failed.
  * Added (Plugins): `channel_state_changed` notification
  * Added (JSON-RPC): `listpays` can be used to query payments using the `payment_hash`
  * Added (JSON-RPC): `listpays` now includes the `payment_hash`
  * Added (JSON-RPC): `listpays` now includes the timestamp of the first part of the payment
  * Added (Build): New reproducible build system now uses docker: try it at home with `doc/REPRODUCIBLE.md`!
  * Added (Plugins): Proxy information now provided in `init.configuration`.
  * Added (Plugins): `openchannel_hook` is now chainable
  * Added (JSON-RPC): `listpeers` shows `features` list for each channel.
  * Added (JSON-RPC): `signpsbt` takes an optional `signonly` array to limit what inputs to sign.
  * Added (JSON-RPC): `utxopsbt` takes a new `locktime` parameter
  * Added (JSON-RPC): `fundpsbt` takes a new `locktime` parameter
  * Added (JSON-RPC): New low-level command `utxopsbt` to create PSBT from existing utxos.
  * Added (JSON-RPC): `listfunds` now has a `redeemscript` field for p2sh-wrapped outputs.
  * Added (JSON-RPC): `fundchannel` has new `outnum` field indicating which output of the transaction funds the channel.
  * Added (pyln-client): commands and options can now mark themselves deprecated.
  * Added (Plugins): can now mark their options and commands deprecated.
  * Added (plugins): `getmanifest` may now include "allow-deprecated-apis" boolean flag.
  * Added (JSON-RPC): `listpays` now lists the `destination` if it was provided (e.g., via the `pay` plugin or `keysend` plugin)
  * Added (config): New option `--important-plugin` loads a plugin is so important that if it dies, `lightningd` will exit rather than continue.  You can still `--disable-plugin` it, however, which trumps `--important-plugin` and it will not be started at all.
  * Added (Plugins): We now explicitly check at startup that our default Bitcoin backend (bitcoind) does relay transactions.
  * Added (Plugins): We now explicitly check at startup the version of our default Bitcoin backend (bitcoind).
  * Changed (Build): we no longer require extra Python modules to build.
  * Changed (Build): SQLite3 is no longer a hard build requirement. C-Lightning can now be built to support only the PostgreSQL back-end.
  * Changed (gossipd): The `gossipd` is now a lot quieter, and will log only when a message changed our network topology.
  * Changed (Protocol): We now make MPP-aware routehints in invoices.
  * Changed (onchaind): We now scorch the earth on theft attempts, RBFing up our penalty transaction as blocks arrive without a penalty transaction getting confirmed.
  * Changed (Protocol): `fundchannel` now shuffles inputs and outputs, and no longer follows BIP69.
  * Changed (JSON-RPC): `withdraw` now randomizes input and output order, not BIP69.
  * Changed (JSON-RPC): `txprepare` reservations stay across restarts: use `fundpsbt`/`reservepsbt`/`unreservepsbt`
  * Changed (config): `min-capacity-sat` is now stricter about checking usable capacity of channels.
  * Changed (Protocol): Ignore (and log as "unusual") repeated `WIRE_CHANNEL_REESTABLISH` messages, to be compatible with buggy peer software that sometimes does this.
  * Changed (contrib): startup_regtest.sh `startup_ln` now takes a number of nodes to create as a parameter
  * Changed (JSON-RPC): `invoice` no longer accepts zero amounts (did you mean "any"?)
  * Changed (Protocol): channels now pruned after two weeks unless both peers refresh it (see lightning-rfc#767)
  * Changed (Protocol): bolt11 invoices always include CLTV fields (see lightning-rfc#785)
  * Changed (config): the default CLTV expiry is now 34 blocks, and final expiry 18 blocks as per new BOLT recommendations.
  * Changed (Plugins): Builtin plugins are now marked as important, and if they crash, will cause C-lightning to stop as well.
  * Changed (Protocol): Funding timeout is now based on the header count reported by the bitcoin backend instead of our current blockheight which might be lower.
  * Changed (JSON-RPC): `delinvoice` will now report specific error codes: 905 for failing to find the invoice, 906 for the invoice status not matching the parameter.
  * Deprecated (Plugins): `bcli` replacements should note that `sendrawtransaction` now has a second required Boolean argument, `allowhighfees`, which if `true`, means ignore any fee limits and just broadcast the transaction.
  * Deprecated (JSON-RPC): `listsendpays` will no longer add `null` if we don't know the `amount_msat` for a payment.
  * Deprecated (Plugins): `getmanifest` without any parameters; plugins should accept any parameters for future use.
  * Removed (JSON-RPC): txprepare `destination` `satoshi` argument form removed (deprecated v0.7.3)
  * Fixed (Plugins): `pay` `presplit` modifier now supports large payments without exhausting the available HTLCs.
  * Fixed (Plugins): `pay` corrects a case where we put the sub-payment value instead of the *total* value in the `total_msat` field of a multi-part payment.
  * Fixed (Plugins): `pay` is less aggressive with forgetting routehints.
  * Fixed (Plugins): `pay` no longer ignores routehints if the payment exceeds 10,000 satoshi. This is particularly bad if the payee is only reachable via routehints in an invoice.
  * Fixed (Plugins): `pay` limits the number of splits if the payee seems to have a low number of channels that can enter it, given the max-concurrent-htlcs limit.
  * Fixed (Plugins): `pay` will now make reliable multi-part payments to nodes it doesn't have a node_announcement for.
  * Fixed (JSON-RPC): significant speedups for plugins which create large JSON replies (e.g. listpays on large nodes).
  * Fixed (doc): Many missing manual pages were completed
  * Fixed (Build): Fixed compile error on macos
  * Fixed (pyln): Fixed HTLCs hanging indefinitely if the hook function raises an exception. A safe fallback result is now returned instead.
  * Fixed (Protocol): We now hang up if peer doesn't respond to init message after 60 seconds.
  * Fixed (elementsd): PSBTs include correct witness_utxo struct for elements transactions
  * Fixed (cli): fixed crash with `listconfigs` in `-H` mode
  * Fixed (Plugins): `bcli` significant speedups for block synchronization
  * Fixed (Build): On systems with multiple installed versions of the PostgreSQL client library, C-Lightning might link against the wrong version or fail to find the library entirely. `./configure` now uses `pg_config` to locate the library.
  * Fixed (Build): On some operating systems the postgresql library would not get picked up. `./configure` now uses `pg_config` to locate the headers.
  * Fixed (libplugin): significant speedups for reading large JSON replies (e.g. calling listsendpays on large nodes, or listchannels / listnodes).

 -- Christian Decker <decker.christian@gmail.com>  Tue, 22 Sep 2020 13:12:00 +0100


lightningd (0.9.0-1) stable; urgency=medium

  * Added (JSON-RPC): `listpays` can be used to query payments using the `payment_hash` ([3888](https://github.com/ElementsProject/lightning/pull/3888))
  * Added (JSON-RPC): `listpays` now includes the `payment_hash` ([3888](https://github.com/ElementsProject/lightning/pull/3888))
  * Added (JSON-RPC): The result returned by `listpays` now includes the timestamp of the first part of the payment ([3909](https://github.com/ElementsProject/lightning/pull/3909))
  * Added (JSON-RPC): `listpays` now lists the `destination` if it was provided (e.g., via the `pay` plugin or `keysend` plugin) ([3915](https://github.com/ElementsProject/lightning/pull/3915))
  * Fixed (pay): Fixed a bug where routehints would be ignored if the payment exceeded 10,000 satoshi. This is particularly bad if the payee is only reachable via routehints in an invoice. ([3908](https://github.com/ElementsProject/lightning/pull/3908))
  * Fixed (pay): Fixed a crash of the `pay` plugin if the presplit modifier skipped the root payment. ([3927](https://github.com/ElementsProject/lightning/pull/3927))
  * Fixed (pay): Correct a case where we put the sub-payment value instead of the *total* value in the `total_msat` field of a multi-part payment.
  * Fixed (pay): Be less aggressive with forgetting routehints.

 -- Christian Decker <decker.christian@gmail.com>  Sat, 15 Aug 2020 12:00:00 +0100

lightningd (0.9.0) stable; urgency=medium

  * Added (plugin): `pay` was rewritten to use the new payment flow. See `legacypay` for old version ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Added (plugin): `pay` will split payments that are failing due to their size into smaller parts, if recipient supports the `basic_mpp` option ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Added (plugin): `pay` will split large payments into parts of approximately 10k sat if the recipient supports the `basic_mpp` option ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Added (plugin): The pay plugin has a new `--disable-mpp` flag that allows opting out of the above two multi-part payment addition.  ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Added (JSON-RPC): new low-level coin selection `fundpsbt` routine. ([3825](https://github.com/ElementsProject/lightning/pull/3825))
  * Added (JSON-RPC): The `pay` command now uses the new payment flow, the new `legacypay` command can be used to issue payment with the legacy code if required. ([3826](https://github.com/ElementsProject/lightning/pull/3826))
  * Added (JSON-RPC): The `keysend` command allows sending to a node without requiring an invoice first. ([3792](https://github.com/ElementsProject/lightning/pull/3792))
  * Added (JSON-RPC): `listfunds` now has a 'scriptpubkey' field. ([3821](https://github.com/ElementsProject/lightning/pull/3821))
  * Added (docker): Docker build now includes `LIGHTNINGD_NETWORK` ENV variable which defaults to "bitcoin". An user can override this (e.g. by `-e` option in `docker run`) to run docker container in regtest or testnet or any valid argument to `--network`. ([3813](https://github.com/ElementsProject/lightning/pull/3813))
  * Added (cli): We now install `lightning-hsmtool` for your `hsm_secret` needs. ([3802](https://github.com/ElementsProject/lightning/pull/3802))
  * Added (JSON-RPC): new call `signpsbt` which will add the wallet's signatures to a provided psbt ([3775](https://github.com/ElementsProject/lightning/pull/3775))
  * Added (JSON-RPC): new call `sendpsbt` which will finalize and send a signed PSBT ([3775](https://github.com/ElementsProject/lightning/pull/3775))
  * Added (JSON-RPC): Adds two new rpc methods, `reserveinputs` and `unreserveinputs`, which allow for reserving or unreserving wallet UTXOs ([3775](https://github.com/ElementsProject/lightning/pull/3775))
  * Added (pyln): `pyln.spec.bolt{1,2,4,7}` packages providing python versions of the spec text and defined messages. ([3777](https://github.com/ElementsProject/lightning/pull/3777))
  * Added (pyln): new module `pyln.proto.message.bolts` ([3733](https://github.com/ElementsProject/lightning/pull/3733))
  * Added (cli): New `--flat` mode for easy grepping of `lightning-cli` output. ([3722](https://github.com/ElementsProject/lightning/pull/3722))
  * Added (plugin): new notification type, `coin_movement`, which tracks all fund movements for a node ([3614](https://github.com/ElementsProject/lightning/pull/3614))
  * Added (plugin): Added a new `commitment_revocation` hook that provides the plugin with penalty transactions for all revoked transactions, e.g., to push them to a watchtower. ([3659](https://github.com/ElementsProject/lightning/pull/3659))
  * Added (JSON-API): `listchannels` now shows channel `features`. ([3685](https://github.com/ElementsProject/lightning/pull/3685))
  * Added (plugin): New `invoice_creation` plugin event ([3658](https://github.com/ElementsProject/lightning/pull/3658))
  * Added (docs): Install documentation now has information about building for Alpine linux ([3660](https://github.com/ElementsProject/lightning/pull/3660))
  * Added (plugin): Plugins can opt out of having an RPC connection automatically initialized on startup. ([3857](https://github.com/ElementsProject/lightning/pull/3857))
  * Added (JSON-RPC): `sendonion` has a new optional `bolt11` argument for when it's used to pay an invoice. ([3878](https://github.com/ElementsProject/lightning/pull/3878))
  * Added (JSON-RPC): `sendonion` has a new optional `msatoshi` that is used to annotate the payment with the amount received by the destination. ([3878](https://github.com/ElementsProject/lightning/pull/3881))
  * Changed (JSON-RPC): `fundchannel_cancel` no longer requires its undocumented `channel_id` argument after `fundchannel_complete`. ([3787](https://github.com/ElementsProject/lightning/pull/3787))
  * Changed (JSON-RPC): `fundchannel_cancel` will now succeed even when executed while a `fundchannel_complete` is ongoing; in that case, it will be considered as cancelling the funding *after* the `fundchannel_complete` succeeds. ([3778](https://github.com/ElementsProject/lightning/pull/3778))
  * Changed (JSON-RPC): `listfunds` 'outputs' now includes reserved outputs, designated as 'reserved' = true ([3764](https://github.com/ElementsProject/lightning/pull/3764))
  * Changed (JSON-RPC): `txprepare` now prepares transactions whose `nLockTime` is set to the tip blockheight, instead of using 0. `fundchannel` will use `nLockTime` set to the tip blockheight as well. ([3797](https://github.com/ElementsProject/lightning/pull/3797))
  * Changed (build): default compile output is prettier and much less verbose ([3686](https://github.com/ElementsProject/lightning/pull/3686))
  * Changed (config): the `plugin-disable` option now works even if specified before the plugin is found. ([3679](https://github.com/ElementsProject/lightning/pull/3679))
  * Changed (plugin): The `autoclean` plugin is no longer dynamic (you cannot manage it with the `plugin` RPC command anymore). ([3788](https://github.com/ElementsProject/lightning/pull/3788))
  * Changed (plugin): The `paystatus` output changed as a result of the payment flow rework ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Deprecated (JSON-RPC): the `legacypay` method from the pay plugin will be removed after `pay` proves stable ([3809](https://github.com/ElementsProject/lightning/pull/3809))
  * Removed (protocol): support for optional fields of the reestablish message are now compulsory. ([3782](https://github.com/ElementsProject/lightning/pull/3782))
  * Fixed (JSON-RPC): Reject some bad JSON at parsing. ([3761](https://github.com/ElementsProject/lightning/pull/3761))
  * Fixed (JSON-RPC): The `feerate` parameters now correctly handle the standardness minimum when passed as `perkb`. ([3772](https://github.com/ElementsProject/lightning/pull/3772))
  * Fixed (JSON-RPC): `listtransactions` now displays all txids as little endian ([3741](https://github.com/ElementsProject/lightning/pull/3741))
  * Fixed (JSON-RPC): `pay` now respects maxfeepercent, even for tiny amounts. ([3693](https://github.com/ElementsProject/lightning/pull/3693))
  * Fixed (JSON-RPC): `withdraw` and `txprepare` `feerate` can be a JSON number. ([3821](https://github.com/ElementsProject/lightning/pull/3821))
  * Fixed (bitcoin): `lightningd` now always exits if the Bitcoin backend failed unexpectedly. ([3675](https://github.com/ElementsProject/lightning/pull/3675))
  * Fixed (cli): Bash completion on `lightning-cli` now works again ([3719](https://github.com/ElementsProject/lightning/pull/3719))
  * Fixed (config): we now take the `--commit-fee` parameter into account. ([3732](https://github.com/ElementsProject/lightning/pull/3732))
  * Fixed (db): Fixed a failing assertion if we reconnect to a peer that we had a channel with before, and then attempt to insert the peer into the DB twice. ([3801](https://github.com/ElementsProject/lightning/pull/3801))
  * Fixed (hsmtool): Make the password argument optional for `guesstoremote` and `dumpcommitments` sub-commands, as shown in our documentation and help text. ([3822](https://github.com/ElementsProject/lightning/pull/3822))
  * Fixed (macOS): Build for macOS Catalina / Apple clang v11.0.3 fixed ([3756](https://github.com/ElementsProject/lightning/pull/3756))
  * Fixed (protocol): Fixed a deviation from BOLT#2: if both nodes advertised `option_upfront_shutdown_script` feature: MUST include ... a zero-length `shutdown_scriptpubkey`. ([3816](https://github.com/ElementsProject/lightning/pull/3816))
  * Fixed (wumbo): negotiate successfully with Eclair nodes. ([3712](https://github.com/ElementsProject/lightning/pull/3712))
  * Fixed (plugin): `bcli` no longer logs a harmless warning about being unable to connect to the JSON-RPC interface. ([3857](https://github.com/ElementsProject/lightning/pull/3857))

 -- Christian Decker <decker.christian@gmail.com>  Fri, 31 July 2020 10:00:00 +0100


lightningd (0.8.2.1) stable; urgency=medium

  * Fixed: `large-channels` now works with Eclair. (Based on [3612](https://github.com/ElementsProject/lightning/pull/3712))

 -- Christian Decker <decker.christian@gmail.com>  Fri, 15 May 2020 10:00:00 +0100


lightningd (0.8.2) stable; urgency=medium

  * Added (pay): The `keysend` plugin implements the ability to receive spontaneous payments (keysend) ([3611](https://github.com/ElementsProject/lightning/pull/3611))
  * Added (Plugin): the Bitcoin backend plugin API is now final. ([3620](https://github.com/ElementsProject/lightning/pull/3620))
  * Added (Plugin): `htlc_accepted` hook can now offer a replacement onion `payload`. ([3611](https://github.com/ElementsProject/lightning/pull/3611))
  * Added (Plugin): `feature_set` object added to `init` ([3612](https://github.com/ElementsProject/lightning/pull/3612))
  * Added (Plugin): 'flag'-type option now available. ([3586](https://github.com/ElementsProject/lightning/pull/3586))
  * Added (JSON API): New `getsharedsecret` command, which lets you compute a shared secret with this node knowing only a public point. This implements the BOLT standard of hashing the ECDH point, and is incompatible with ECIES. ([3490](https://github.com/ElementsProject/lightning/pull/3490))
  * Added (JSON API): `large-channels` option to negotiate opening larger channels. ([3612](https://github.com/ElementsProject/lightning/pull/3612))
  * Added (JSON API): New optional parameter to the `close` command to control the closing transaction fee negotiation back off step ([3390](https://github.com/ElementsProject/lightning/pull/3390))
  * Added (JSON API): `connect` returns `features` of the connected peer on success. ([3612](https://github.com/ElementsProject/lightning/pull/3612))
  * Added (JSON API): `listpeers` now has `receivable_msat` ([3572](https://github.com/ElementsProject/lightning/pull/3572))
  * Added (JSON API): The fields "opening", "mutual_close", "unilateral_close", "delayed_to_us", "htlc_resolution" and "penalty" have been added to the `feerates` command. ([3570](https://github.com/ElementsProject/lightning/pull/3570))
  * Added (JSON API): "htlc_timeout_satoshis" and "htlc_success_satoshis" fields have been added to the `feerates` command. ([3570](https://github.com/ElementsProject/lightning/pull/3570))
  * Added (pyln) now sends proper error on bad calls to plugin methods ([3640](https://github.com/ElementsProject/lightning/pull/3640))
  * Added (devtools): The `onion` tool can now generate, compress and decompress onions for rendez-vous routing ([3557](https://github.com/ElementsProject/lightning/pull/3557))
  * Added (doc): An FAQ was added, accessible at https://lightning.readthedocs.io/FAQ.html ([3551](https://github.com/ElementsProject/lightning/pull/3551))
  * Changed We now use a higher feerate for resolving onchain HTLCs and for penalty transactions ([3592](https://github.com/ElementsProject/lightning/pull/3592))
  * Changed We now announce multiple addresses of the same type, if given. ([3609](https://github.com/ElementsProject/lightning/pull/3609))
  * Changed (pay): Improved the performance of the `pay`-plugin by limiting the `listchannels` when computing the shadow route. ([3617](https://github.com/ElementsProject/lightning/pull/3617))
  * Changed (JSON API): `invoice` `exposeprivatechannels` now includes explicitly named channels even if they seem like dead-ends. ([3633](https://github.com/ElementsProject/lightning/pull/3633))
  * Changed Added workaround for lnd rejecting our commitment_signed when we send an update_fee after channel confirmed. ([3634](https://github.com/ElementsProject/lightning/pull/3634))
  * Changed We now batch the requests for fee estimation to our Bitcoin backend. ([3570](https://github.com/ElementsProject/lightning/pull/3570))
  * Changed We now get more fine-grained fee estimation from our Bitcoin backend. ([3570](https://github.com/ElementsProject/lightning/pull/3570))
  * Changed Forwarding messages is now much faster (less inter-daemon traffic) ([3547](https://github.com/ElementsProject/lightning/pull/3547))
  * Changed (dependencies): We no longer depend on python2 which has reached end-of-life ([3552](https://github.com/ElementsProject/lightning/pull/3552))
  * Deprecated: JSON API: `fundchannel_start` `satoshi` field really deprecated now (use `amount`). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Deprecated: JSON API: The "urgent", "slow", and "normal" field of the `feerates` command are now deprecated. ([3570](https://github.com/ElementsProject/lightning/pull/3570))
  * Deprecated: JSON API: Removed double wrapping of `rpc_command` payload in `rpc_command` JSON field. ([3560](https://github.com/ElementsProject/lightning/pull/3560))
  * Deprecated: Plugins: htlc_accepted_hook "failure_code" only handles simple cases now, use "failure_message". ([3472](https://github.com/ElementsProject/lightning/pull/3472))
  * Deprecated: Plugins: invoice_payment_hook "failure_code" only handles simple cases now, use "failure_message". ([3472](https://github.com/ElementsProject/lightning/pull/3472))
  * Removed: JSON API: `listnodes` `globalfeatures` output (`features` since in 0.7.3). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Removed: JSON API: `listpeers` `localfeatures` and `globalfeatures` output (`features` since in 0.7.3). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Removed: JSON API: `peer_connected` hook `localfeatures` and `globalfeatures` output (`features` since in 0.7.3). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Removed: JSON API: `fundchannel` and `fundchannel_start` `satoshi` parameter removed (renamed to `amount` in 0.7.3). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Removed: JSON API: `close` `force` parameter removed (deprecated in 0.7.2.1) ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Removed: JSON API: `sendpay` `description` parameter removed (renamed to `label` in 0.7.0). ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Fixed: Plugins: A crashing plugin will no longer cause a hook call to be delayed indefinitely ([3539](https://github.com/ElementsProject/lightning/pull/3539))
  * Fixed: Plugins: setting an 'init' feature bit allows us to accept it from peers. ([3609](https://github.com/ElementsProject/lightning/pull/3609))
  * Fixed: Plugins: if an option has a type int or bool, return the option as that type to the plugin's init ([3582](https://github.com/ElementsProject/lightning/pull/3582))
  * Fixed: Plugins: Plugins no longer linger indefinitely if their process terminates ([3539](https://github.com/ElementsProject/lightning/pull/3539))
  * Fixed: JSON API: Pending RPC method calls are now terminated if the handling plugin exits prematurely. ([3639](https://github.com/ElementsProject/lightning/pull/3639))
  * Fixed: JSON API: `fundchannel_start` returns `amount` even when deprecated APIs are enabled. ([3603](https://github.com/ElementsProject/lightning/pull/3603))
  * Fixed: JSON API: Passing 0 as minconf to withdraw allows you to use unconfirmed transaction outputs, even if explicitly passed as the `utxos` parameter ([3593](https://github.com/ElementsProject/lightning/pull/3593))
  * Fixed: JSON API: `txprepare` doesn't crash lightningd anymore if you pass unconfirmed utxos ([3534](https://github.com/ElementsProject/lightning/pull/3534))
  * Fixed: invoice: The invoice parser assumed that an amount without a multiplier was denominated in msatoshi instead of bitcoins. ([3636](https://github.com/ElementsProject/lightning/pull/3636))
  * Fixed: pay: The `pay`-plugin was generating non-contiguous shadow routes ([3617](https://github.com/ElementsProject/lightning/pull/3617))
  * Fixed: `pay` would crash on expired waits with tried routes ([3630](https://github.com/ElementsProject/lightning/pull/3630))
  * Fixed: `pay` would crash when attempting to find cheaper route with exemptfee ([3630](https://github.com/ElementsProject/lightning/pull/3630))
  * Fixed: Multiple definition of chainparams on Fedora (or other really recent gcc) ([3631](https://github.com/ElementsProject/lightning/pull/3631))
  * Fixed: bcli now handles 0msat outputs in gettxout. ([3605](https://github.com/ElementsProject/lightning/pull/3605))
  * Fixed: Fix assertion on reconnect if we fail to run openingd. ([3604](https://github.com/ElementsProject/lightning/pull/3604))
  * Fixed: Use lightning-rfc #740 feespike margin factor of 2 ([3589](https://github.com/ElementsProject/lightning/pull/3589))
  * Fixed: Always broadcast the latest close transaction at the end of the close fee negotiation, instead of sometimes broadcasting the peer's initial closing proposal. ([3556](https://github.com/ElementsProject/lightning/pull/3556))


 -- Christian Decker <decker.christian@gmail.com>  Fri, 15 May 2020 10:00:00 +0100

lightningd (0.8.1) UNRELEASED; urgency=medium

  * Added (Plugin): pluggable backends for Bitcoin data queries, default still bitcoind (using bitcoin-cli). ([3488](https://github.com/ElementsProject/lightning/pull/3488))
  * Added (Plugin): Plugins can now signal support for experimental protocol extensions by registering featurebits for `node_announcement`s, the connection handshake, and for invoices. For now this is limited to non-dynamic plugins only ([3477](https://github.com/ElementsProject/lightning/pull/3477))
  * Added (Plugin): 'plugin start' now restores initial umask before spawning the plugin process ([3375](https://github.com/ElementsProject/lightning/pull/3375))
  * Added (JSON API): `fundchannel` and `fundchannel_start` can now accept an optional parameter, `push_msat`, which will gift that amount of satoshis to the peer at channel open. ([3369](https://github.com/ElementsProject/lightning/pull/3369))
  * Added (JSON API): `waitanyinvoice` now supports a `timeout` parameter, which when set will cause the command to fail if unpaid after `timeout` seconds (can be 0). ([3449](https://github.com/ElementsProject/lightning/pull/3449))
  * Added (Config): `--rpc-file-mode` sets permissions on the JSON-RPC socket. ([3437](https://github.com/ElementsProject/lightning/pull/3437))
  * Added (Config): `--subdaemon` allows alternate subdaemons. ([3372](https://github.com/ElementsProject/lightning/pull/3372))
  * Added (lightningd): Optimistic locking prevents instances from running concurrently against the same database, providing linear consistency to changes. ([3358](https://github.com/ElementsProject/lightning/pull/3358))
  * Added (hsmd): Added fields to hsm_sign_remote_commitment_tx to allow complete validation by signing daemon. ([3363](https://github.com/ElementsProject/lightning/pull/3363))
  * Added (Wallet): withdrawal transactions now sets nlocktime to the current tip. ([3465](https://github.com/ElementsProject/lightning/pull/3465))
  * Added (elements): Added support for the dynafed block header format and elementsd >=0.18.1 ([3440](https://github.com/ElementsProject/lightning/pull/3440))
  * Changed (JSON API): The hooks `db_write`, `invoice_payment`, and `rpc_command` now accept `{ "result": "continue" }` to mean "do default action". ([3475](https://github.com/ElementsProject/lightning/pull/3475))
  * Changed (Plugin): Multiple plugins can now register for the htlc_accepted hook. ([3489](https://github.com/ElementsProject/lightning/pull/3489))
  * Changed (JSON API): `listforwards` now shows `out_channel` even if we couldn't forward.
  * Changed (JSON API): `funchannel_cancel`: only the opener of a fundchannel can cancel the channel open ([3336](https://github.com/ElementsProject/lightning/pull/3336))
  * Changed (JSON API): `sendpay` optional `msatoshi` param for non-MPP (if set), must be the exact amount sent to the final recipient. ([3470](https://github.com/ElementsProject/lightning/pull/3470))
  * Changed (JSON API): `waitinvoice` now returns error code 903 to designate that the invoice expired during wait, instead of the previous -2 ([3441](https://github.com/ElementsProject/lightning/pull/3441))
  * Changed (JSON_API): The `connect` command now returns its own error codes instead of a generic -1. ([3397](https://github.com/ElementsProject/lightning/pull/3397))
  * Changed (Plugin): `notify_sendpay_success` and `notify_sendpay_failure` are now always called, even if there is no command waiting on the result. ([3405](https://github.com/ElementsProject/lightning/pull/3405))
  * Changed (hsmtool): `hsmtool` now creates its backup copy in the same directory as the original `hsm_secret` file. ([3409](https://github.com/ElementsProject/lightning/pull/3409))
  * Changed (JSON API): `invoice` `exposeprivatechannels` can specify exact channel candidates. ([3351](https://github.com/ElementsProject/lightning/pull/3351))
  * Changed (JSON API): `db_write` new field `data_version` which contains a numeric transaction counter. ([3358](https://github.com/ElementsProject/lightning/pull/3358))
  * Changed (JSON API): `plugin stop` result is now accessible using the `result` key instead of the empty ('') key. ([3374](https://github.com/ElementsProject/lightning/pull/3374))
  * Changed (lightning-cli): specifying `--rpc-file` (without `--network`) has been restored. ([3353](https://github.com/ElementsProject/lightning/pull/3353))
  * Deprecated (JSON API): The hook `db_write` returning `true`: use `{ "result": "continue" }`. ([3475](https://github.com/ElementsProject/lightning/pull/3475))
  * Deprecated (JSON API): The hook `invoice_payment` returning `{}`: use `{ "result": "continue" }`. ([3475](https://github.com/ElementsProject/lightning/pull/3475))
  * Deprecated (JSON API): The hook `rpc_command` returning `{"continue": true}`: use `{ "result": "continue" }`. ([3475](https://github.com/ElementsProject/lightning/pull/3475))
  * Deprecated (JSON API): `plugin stop` result with an empty ("") key: use "result". ([3374](https://github.com/ElementsProject/lightning/pull/3374))
  * Removed (Plugin): Relative plugin paths are not relative to startup (deprecated v0.7.2.1) ([3471](https://github.com/ElementsProject/lightning/pull/3471))
  * Removed (JSON API): Dummy fields in listforwards (deprecated v0.7.2.1) ([3471](https://github.com/ElementsProject/lightning/pull/3471))
  * Fixed (Doc): Corrected and expanded `lightning-listpeers.7` documentation. ([3497](https://github.com/ElementsProject/lightning/pull/3497))
  * Fixed (Doc): Fixed factual errors in `lightning-listchannels.7` documentation. ([3494](https://github.com/ElementsProject/lightning/pull/3494))
  * Fixed (Protocol): Corner case where channel could become unusable (https://github.com/lightningnetwork/lightning-rfc/issues/728) ([3500](https://github.com/ElementsProject/lightning/pull/3500))
  * Fixed (Plugins): Dynamic C plugins can now be managed when lightningd is up ([3480](https://github.com/ElementsProject/lightning/pull/3480))
  * Fixed (Doc): `connect`: clarified failure problems and usage. ([3459](https://github.com/ElementsProject/lightning/pull/3459))
  * Fixed (Doc): `fundchannel`: clarify that we automatically `connect`s if your node knows how. ([3459](https://github.com/ElementsProject/lightning/pull/3459))
  * Fixed (Protocol): Now correctly reject "fees" paid when we're the final hop (lightning-rfc#711) ([3474](https://github.com/ElementsProject/lightning/pull/3474))
  * Fixed (JSON API): `txprepare` no longer crashes when more than two outputs are specified ([3384](https://github.com/ElementsProject/lightning/pull/3384))
  * Fixed (Pyln): now includes the "jsonrpc" field to jsonrpc2 requests ([3442](https://github.com/ElementsProject/lightning/pull/3442))
  * Fixed (Plugin): `pay` now detects a previously non-permanent error (`final_cltv_too_soon`) that has been merged into a permanent error (`incorrect_or_unknown_payment_details`), and retries. ([3376](https://github.com/ElementsProject/lightning/pull/3376))
  * Fixed (JSON API): The arguments for `createonion` are now checked to ensure they fit in the onion packet. ([3404](https://github.com/ElementsProject/lightning/pull/3404))
  * Fixed (TOR): We don't send any further request if the return code of connect is not zero or error. ([3408](https://github.com/ElementsProject/lightning/pull/3408))
  * Fixed (Build): Developer mode compilation on FreeBSD. ([3344](https://github.com/ElementsProject/lightning/pull/3344))
  * Fixed (Protocol): We now reject invoices which ask for sub-millisatoshi amounts ([3481](https://github.com/ElementsProject/lightning/pull/3481))


 -- Christian Decker <decker.christian@gmail.com>  Fri, 21 Feb 2020 10:00:00 +0100

lightningd (0.8.0) stable; urgency=medium

  * Added (JSON API): Added createonion and sendonion JSON-RPC methods allowing the implementation of custom protocol extensions that are not directly implemented in c-lightning itself.
  * Added (JSON API): listinvoices now displays the payment preimage if the invoice was paid.
  * Added (JSON API): listpeers channels now include close_to and close_to_addr iff a close_to address was specified at channel open
  * Added The new pyln-testing package now contains the testing infrastructure so it can be reused to test against c-lightning in external projects
  * Added (config): configuration files now support include.
  * Added (options): Allow the Tor inbound service port differ from 9735
  * Added (options): Persistent Tor address support
  * Added (plugins): A new plugin hook, rpc_command allows a plugin to take over lightningd for any RPC command.
  * Added (plugins): Allow the accepter to specify an upfront_shutdown_script for a channel via a close_to field in the openchannel hook result
  * Added (plugins): Plugins may now handle modern TLV-style payloads via the htlc_accepted hook
  * Added (plugins): libplugin now supports writing plugins which register to hooks
  * Added (plugins): libplugin now supports writing plugins which register to notifications
  * Added (protocol): Payment amount fuzzing is restored, but through shadow routing.
  * Added (protocol): We now signal the network we are running on at init.
  * Added (quirks): Workaround LND's reply_channel_range issues instead of sending error.
  * Added (tools): A new command, guesstoremote, is added to the hsmtool. It is meant to be used to recover funds after an unilateral close of a channel with option_static_remotekey enabled.
  * Changed (config): Default network (new installs) is now bitcoin, not testnet.
  * Changed (config): Lightning directory, plugins and files moved into <network>/ subdir
  * Changed (JSON API): The fundchannel command now tries to connect to the peer before funding the channel, no need to connect before fundchannel if an address for the peer is known
  * Changed (JSON API): htlc_accepted hook has type (currently legacy or tlv) and other fields directly inside onion.
  * Changed (JSON API): lightning_ prefixes removed from subdaemon names, including in listpeers owner field.
  * Changed (JSON API): listconfigs now structures plugins and include their options
  * Changed (JSON API): the raw_payload now includes the first byte, i.e., the realm byte, of the payload as well. This allows correct decoding of a TLV payload in the plugins.
  * Changed (logging): formatting made uniform: [NODEID-]SUBSYSTEM: MESSAGE
  * Changed (options): config and <network>/config read by default.
  * Changed (options): log-level can now specify different levels for different subsystems.
  * Changed (protocol): The TLV payloads for the onion packets are no longer considered an experimental feature and generally available.
  * WARNING: If you don't have a config file, you now may need to specify the network to lightning-cli
  * Deprecated (JSON API): listconfigs duplicated "plugin" paths
  * Deprecated (JSON API): htlc_accepted hook per_hop_v0 object deprecated, as is short_channel_id for the final hop
  * Fixed (JSON API): #3231 listtransactions crash
  * Fixed (JSON API): listconfigs appends '...' to truncated config options
  * Fixed pyln-client now handles unicode characters in JSON-RPC requests and responses correctly.
  * Fixed (bitcoin): If bitcoind goes backwards (e.g. reindex) refuse to start (unless forced with --rescan).
  * Fixed (bug): gossipd crash on huge number of unknown channels.
  * Fixed (gossip): No longer discard most node_announcements
  * Fixed (options): We disable all dns even on startup the scan for bogus dns servers, if --always-use-proxy is set true
  * Fixed (protocol): Unlikely corner case is simultanous HTLCs near balance limits fixed

 -- Christian Decker <decker.christian@gmail.com>  Tue, 17 Dec 2019 14:05:00 +0100

lightningd (0.7.3) stable; urgency=low

  * Added (DB): lightningd now supports different SQL backends, instead of the default which is sqlite3. Adds a PostgresSQL driver
  * Added (elements): Add support of Liquid-BTC on elements
  * Added (JSON API): `close` now accepts an optional parameter `destination`, to which the to-local output will be sent.
  * Added (JSON API): `txprepare` and `withdraw` now accept an optional parameter `utxos`, a list of utxos to include in the prepared transaction
  * Added (JSON API): `listfunds` now lists a blockheight for confirmed transactions, and has `connected` and `state` fields for channels, like `listpeers`.
  * Added (JSON API): `fundchannel_start` now includes field `scriptpubkey`
  * Added (JSON API): New method `listtransactions`
  * Added (JSON API): `signmessage` will now create a signature from your node on a message; `checkmessage` will verify it.
  * Added (JSON API): `fundchannel_start` now accepts an optional parameter `close_to`, the address to which these channel funds should be sent to on close. Returns `using_close_to` if will use.
  * Added (Plugin): new notifications `sendpay_success` and `sendpay_failure`.
  * Added (Protocol): nodes now announce features in `node_announcement` broadcasts.
  * Added (Protocol): we now offer `option_gossip_queries_ex` for finegrained gossip control.
  * Added (Protocol): we now retransmit `funding_locked` upon reconnection while closing if there was no update
  * Added (Protocol): no longer ask for `initial_routing_sync` (only affects ancient peers).
  * Added (bolt11): support for parsing feature bits (field `9`).
  * Added (Wallet): we now support the encryption of the BIP32 master seed (a.k.a. `hsm_secret`).
  * Added (pylightning): includes implementation of handshake protocol
  * Changed (Build): Now requires [`gettext`](https://www.gnu.org/software/gettext/)
  * Changed (JSON API): The parameter `exclude` of `getroute` now also support node-id.
  * Changed (JSON API): `txprepare` now uses `outputs` as parameter other than `destination` and `satoshi`
  * Changed (JSON API): `fundchannel_cancel` is extended to work before funding broadcast.
  * Changed (JSON API): `pay` can exclude error nodes if the failcode of `sendpay` has the NODE bit set
  * Changed (JSON API): The `plugin` command now returns on error. A timeout of 20 seconds is added to `start` and `startdir` subcommands at the end of which the plugin is errored if it did not complete the handshake with `lightningd`.
  * Changed (JSON API): The `plugin` command does not allow to start static plugins after `lightningd` startup anymore.
  * Changed (Protocol): We now push our own gossip to all peers, independent of their filter.
  * Changed (Protocol): Now follows spec in responses to short channel id queries on unknown chainhashes
  * Changed (Tor): We default now with autotor to generate if possible temporary ED25519-V3 onions.  You can use new option `enable-autotor-v2-mode` to fallback to V2 RSA1024 mode.
  * Deprecated (JSON API): `fundchannel` now uses `amount` as the parameter name to replace `satoshi`
  * Deprecated (JSON API): `fundchannel_start` now uses `amount` as the parameter name to replace `satoshi`
  * Deprecated (JSON API): `listpeers` and `listnodes` fields `localfeatures` and `globalfeatures` (now just `features`).
  * Deprecated (Plugin): `peer_connected` hook fields `localfeatures` and `globalfeatures` (now just `features`).
  * Removed (JSON API): `short_channel_id` parameters in JSON commands with `:` separators (deprecated since 0.7.0).
  * Removed (JSON API): `description` parameters in `pay` and `sendpay` (deprecated since 0.7.0).
  * Removed (JSON API): `description` output field in `waitsendpay` and `sendpay` (deprecated since 0.7.0).
  * Removed (JSON API): `listpayments` (deprecated since 0.7.0).
  * Fixed Fixed bogus "Bad commit_sig signature" which caused channel closures when reconnecting after updating fees under simultaneous bidirectional traffic.
  * Fixed Relative `--lightning_dir` is now working again.
  * Fixed (Build): MacOS now builds again (missing pwritev).

 -- Christian Decker <decker.christian@gmail.com>  Tue, 05 Nov 2019 23:00:00 +0100

lightningd (0.7.2-1) stable; urgency=low
  * JSON API: a new command `plugin` allows one to manage plugins without restarting `lightningd`.
  * Plugin: a new boolean field can be added to a plugin manifest, `dynamic`. It allows a plugin to tell if it can be started or stopped "on-the-fly".
  * Plugin: a new boolean field is added to the `init`'s `configuration`, `startup`. It allows a plugin to know if it has been started on `lightningd` startup.
  * Plugin: new notifications `invoice_payment`, `forward_event` and `channel_opened`.
  * Protocol: `--enable-experimental-features` adds gossip query extensions aka https://github.com/lightningnetwork/lightning-rfc/pull/557
  * contrib: new `bootstrap-node.sh` to connect to random mainnet nodes.
  * JSON API: `listfunds` now returns also `funding_output` for `channels`
  * Plugin: plugins can now suggest `lightning-cli` default to -H for responses.
  * Lightningd: add support for `signet` networks using the `--network=signet` or `--signet` startup option
  * Build: now requires `python3-mako` to be installed, i.e. `sudo apt-get install python3-mako`
  * JSON API: `close` optional arguments have changed: it now defaults to unilateral close after 48 hours.
  * Plugin: if the config directory has a `plugins` subdirectory, those are loaded.
  * lightningd: check bitcoind version when setup topology and confirm the version not older than v0.15.0.
  * Protocol: space out reconnections on startup if we have more than 5 peers.
  * JSON API: `listforwards` includes the 'payment_hash' field.
  * Plugin: now plugins always run from the `lightning-dir` for easy local storage.
  * Plugin: using startup-relative paths for `plugin` and `plugin-dir`: they're now relative to `lightning-dir`.
  * JSON API: `listforwards` removed dummy (zero) fields for `out_msat`, `fee_msat`, `in_channel` and `out_channel` if unknown (i.e. deleted from db, or `status` is `local-failed`.
  * Plugin: `pay` no longer crashes on timeout.
  * Plugin: `disconnect` notifier now called if remote side disconnects.
  * channeld: ignore, and simply try reconnecting if lnd sends "sync error".
  * Protocol: we now correctly ignore unknown odd messages.
  * wallet: We will now backfill blocks below our wallet start height on demand when we require them to verify gossip messages. This fixes an issue where we would not remove channels on spend that were opened below that start height because we weren't tracking the funding output.
  * Fix: Detect when we're still syncing with bitcoin network: don't send or receive HTLCs or allow `fundchannel`.
  * Fix:  Rare onchaind error where we don't recover our own unilateral close with multiple same-preimage HTLCs fixed.

 -- Christian Decker <decker.christian@gmail.com>  Tue, 20 Aug 2019 18:00:00 +0100

lightningd (0.7.1-1) stable; urgency=low

  * Protocol: we now enforce option_upfront_shutdown_script if a peer negotiates it.
  * JSON API: New command setchannelfee sets channel specific routing fees.
  * JSON API: new withdraw methods txprepare, txsend and txdiscard.
  * JSON API: add three new RPC commands: fundchannel_start, fundchannel_complete and fundchannel_cancel. Allows a user to initiate and complete a channel open using funds that are in a external wallet.
  * Plugin: new hooks db_write for intercepting database writes, invoice_payment for intercepting invoices before they're paid, openchannel for intercepting channel opens, and htlc_accepted to decide whether to resolve, reject or continue an incoming or forwarded payment..
  * Plugin: new notification warning to report any LOG_UNUSUAL/LOG_BROKEN level event.
  * Plugin: Added a default plugin directory : lightning_dir/plugins. Each plugin directory it contains will be added to lightningd on startup.
  * Plugin: the connected hook can now send an error_message to the rejected peer.
  * JSON API: newaddr outputs bech32 or p2sh-segwit, or both with new all parameter (#2390)
  * JSON API: listpeers status now shows how many confirmations until channel is open (#2405)
  * Config: Adds parameter min-capacity-sat to reject tiny channels.
  * JSON API: listforwards now includes the time an HTLC was received and when it was resolved. Both are expressed as UNIX timestamps to facilitate parsing (Issue #2491, PR #2528)
  * JSON API: listforwards now includes the local_failed forwards with failcode (Issue #2435, PR #2524)
  * DB: Store the signatures of channel announcement sent from remote peer into DB, and init channel with signatures from DB directly when reenable the channel. (Issue #2409)
  * JSON API: listchannels has new fields htlc_minimum_msat and htlc_maximum_msat.
  * Gossip: we no longer compact the gossip_store file dynamically, due to lingering bugs. Restart if it gets too large.
  * Protocol: no longer ask for entire gossip flood from peers, unless we're missing gossip.
  * JSON API: invoice expiry defaults to 7 days, and can have s/m/h/d/w suffixes.
  * Config: Increased default amount for minimal channel capacity from 1k sat to 10k sat.
  * JSON API: A new parameter is added to fundchannel, which now accepts an utxo array to use to fund the channel.
  * Build: Non-developer builds are now done with "-Og" optimization.
  * JSON API: pay will no longer return failure until it is no longer retrying; previously it could "timeout" but still make the payment.
  * JSON API: the command objects that help outputs now contain a new string field : category (can be "bitcoin", "channels", "network", "payment", "plugins", "utility", "developer" for native commands, or any other new category set by a plugin).
  * Plugin: a plugin can now set the category of a newly created RPC command. This possibility has been added to libplugin.c and pylightning.
  * lightning-cli: the human readable help is now more human and more readable : commands are sorted alphabetically and ordered by categories.
  * JSON API: newaddr output field address: use bech32 or p2sh-segwit instead.
  * JSON RPC: global_features and local_features fields and listchannels' flags field. (Deprecated since 0.6.2).
  * pylightning: Remove RPC support for c-lightning before 0.6.3.
  * Protocol: reconnection during closing negotiation now supports option_data_loss_protect properly.
  * --bind-addr=<path> fixed for nodes using local sockets (eg. testing).
  * Unannounced local channels were forgotten for routing on restart until reconnection occurred.
  * lightning-cli: arguments containing " now succeed, rather than causing JSON errors.
  * Protocol: handle lnd sending more messages before reestablish; don't fail channel, and handle older lnd's spurious empty commitments.
  * Fixed fundchannel crash when we have many UTXOs and we skip unconfirmed ones.
  * lightningd: fixed occasional hang on connect when peer had sent error.
  * JSON RPC: decodeinvoice and pay now handle unknown invoice fields properly.
  * JSON API: waitsendpay (PAY_STOPPED_RETRYING) error handler now returns valid JSON
  * protocol: don't send multiple identical feerate changes if we want the feerate higher than we can afford.
  * JSON API: stop now only returns once lightningd has released all resources.

 -- Christian Decker <decker.christian@gmail.com>  Thu, 04 Jun 2019 13:29:00 -0100

lightningd (0.7.0-1) stable; urgency=low

  * plugins: fully enabled, and ready for you to write some!
  * plugins: `pay` is now a plugin.
  * protocol: `pay` will now use routehints in invoices if it needs to.
  * build: reproducible source zipfile and Ubuntu 18.04.1 build.
  * JSON API: New command `paystatus` gives detailed information on `pay` commands.
  * JSON API: `getroute`, `invoice`, `sendpay` and `pay` commands `msatoshi`
  parameter can have suffixes `msat`, `sat` (optionally with 3 decimals) or `btc`
  (with 1 to 11 decimal places).
  * JSON API: `fundchannel` and `withdraw` commands `satoshi`
  parameter can have suffixes `msat` (must end in `000`), `sat` or `btc`
  (with 1 to 8 decimal places).
  * JSON API: `decodepay`, `getroute`, `sendpay`, `pay`, `listpeers`, `listfunds`, `listchannels` and
  all invoice commands now return an `amount_msat` field which has an `msat` suffix.
  * JSON API: `listfunds` `channels` now has `_msat` fields for each existing raw amount field, with `msat` suffix.
  * JSON API: `waitsendpay` now has an `erring_direction` field.
  * JSON API: `listpeers` now has a `direction` field in `channels`.
  * JSON API: `listchannels` now takes a `source` option to filter by node id.
  * JSON API: `getroute` `riskfactor` argument is simplified; `pay` now defaults to setting it to 10.
  * JSON API: `sendpay` now takes a `bolt11` field, and it's returned in `listpayments` and `waitsendpay`.
  * JSON API: `fundchannel` and `withdraw` now have a new parameter `minconf` that limits coinselection to outputs that have at least `minconf` confirmations (default 1). (#2380)
  * JSON API: `listfunds` now displays addresses for all outputs owned by the wallet (#2387)
  * JSON API: `waitsendpay` and `sendpay` output field `label` as specified by `sendpay` call.
  * JSON API: `listpays` command for higher-level payment view than `listpayments`, especially important with multi-part-payments coming.
  * JSON API: `listpayments` is now `listsendpays`.
  * lightning-cli: `help <cmd>` finds man pages even if `make install` not run.
  * pylightning: New class 'Millisatoshi' can be used for JSON API, and new '_msat' fields are turned into this on reading.
  * protocol: `option_data_loss_protect` is now enabled by default.
  * JSON API: The `short_channel_id` separator has been changed to be `x` to match the specification.
  * JSON API: `listpeers` now includes `funding_allocation_msat`, which returns a map of the amounts initially funded to the channel by each peer, indexed by channel id.
  * JSON API: `help` with a `command` argument gives a JSON array, like other commands.
  * JSON API: `sendpay` `description` parameter is renamed `label`.
  * JSON API: `pay` now takes an optional `label` parameter for labelling payments, in place of never-used `description`.
  * build: we'll use the system libbase58 and libsodium if found suitable.
  * JSON API: `short_channel_id` fields in JSON commands with `:` separators (use `x` instead).
  * JSON API: `pay` `description` is deprecated, as is support for BOLT11 strings using `h`.
  * JSON API: `sendpay` parameter `description` and `waitsendpay` and `sendpay` output fields `description` (now `label`).
  * JSON API: `listpayments` has been deprecated (you probably want `listpays`)
  * JSON API: the `waitsendpay` command error return no longer includes `channel_update`
  * Protocol: handling `query_channel_range` for large numbers of blocks
  (eg. 4 billion) was slow due to a bug.
  * Fixed occasional deadlock with peers when exchanging huge amounts of gossip.
  * Fixed a crash when running in daemon-mode due to db filename overrun (#2348)
  * Handle lnd sending premature 'funding_locked' message when we're expected 'reestablish';
  we used to close channel if this happened.
  * Cleanup peers that started opening a channel, but then disconnected. These
  would leave a dangling entry in the DB that would cause this peer to be
  unable to connect. (PR #2371)
  * You can no longer make giant unpayable "wumbo" invoices.
  * CLTV of total route now correctly evaluated when finding best route.
  * `riskfactor` arguments to `pay` and `getroute` now have an effect.

 -- Christian Decker <decker.christian@gmail.com>  Mon, 04 Mar 2019 11:36:00 -0100

lightningd (0.6.3-1) stable; urgency=low

  * JSON API: New command check checks the validity of a JSON API call without running it.
  * JSON API: getinfo now returns num_peers num_pending_channels, num_active_channels and num_inactive_channels fields.
  * JSON API: use \n\n to terminate responses, for simplified parsing (pylightning now relies on this)
  * JSON API: fundchannel now includes an announce option, when false it will keep channel private. Defaults to true.
  * JSON API: listpeers's channels now includes a private flag to indicate if channel is announced or not.
  * Plugins: experimental plugin support for lightningd, including option passthrough and JSON-RPC passthrough.
  * JSON API: pay and decodepay accept and ignore lightning: prefixes.
  * pylightning: Allow either keyword arguments or positional arguments.
  * JSON-RPC: messages are now separated by 2 consecutive newlines.
  * JSON-RPC: jsonrpc:2.0 now included in json-rpc command calls. complies with spec.
  * pylightning: Support for pre-2-newline JSON-RPC (<= 0.6.2 lightningd) is deprecated.
  * option_data_loss_protect is now only offered if EXPERIMENTAL_FEATURES is enabled, since it seems incompatible with lnd and has known bugs.
  * JSON API: uppercase invoices now parsed correctly (broken in 0.6.2).
  * JSON API: commands are once again read even if one hasn't responded yet (broken in 0.6.2).
  * Protocol: allow lnd to send update_fee before funding_locked.
  * Protocol: fix limit on how much funder can send (fee was 1000x too small)
  * Protocol: don't send invalid onion errors if peer says onion was bad.
  * Protocol: don't crash when peer sends a 0-block-expiry HTLC.
  * pylightning: handle multiple simultanous RPC replies reliably.

 -- Christian Decker <decker.christian@gmail.com>  Fri, 11 Jan 2019 10:36:00 -0400

lightningd (0.6.2-1) stable; urgency=low

  * JSON API: listpeers has new field scratch_txid: the latest tx in channel.
  * JSON API: listpeers has new array htlcs: the current live payments.
  * JSON API: listchannels has two new fields: message_flags and channel_flags. This replaces flags.
  * JSON API: invoice now adds route hint to invoices for incoming capacity (RouteBoost), and warns if insufficient capacity.
  * JSON API: listforwards lists all forwarded payments, their associated channels, and fees.
  * JSON API: getinfo shows forwarding fees earnt as msatoshi_fees_collected.
  * Bitcoind: more parallelism in requests, for very slow nodes.
  * Testing: fixed logging, cleaner interception of bitcoind, minor fixes.
  * Protocol: we set and handle the new htlc_maximum_msat channel_update field.
  * Protocol: channel_update sent to disable channel only if we reject an HTLC.
  * Protocol: we don't send redundant node_announcement on every new channel.
  * Config: config file can override lightning-dir (makes sense with --conf).
  * Config: --conf option is now relative to current directory, not lightning-dir.
  * lightning-cli: help <cmd> prints basic information even if no man page found.
  * JSON API: getinfo now reports global statistics about forwarded payments, including total fees earned and amounts routed.
  * JSON RPC: listchannels' flags field. This has been split into two fields, see Added.
  * JSON RPC: global_features and local_features fields: use globalfeatures and localfeatures as per BOLT #1.
  * Startup: more coherent complaint if daemon already running.
  * Lightningd: correctly save full HTLCs across restarts; fixup old databases.
  * JSON RPC: getinfo now shows correct Tor port.
  * JSON RPC: ping now works even after one peer fails to respond.
  * JSON RPC: getroute fuzzpercent and pay maxfeepercent can now be > 100.
  * JSON RPC: riskfactor in pay and getroute no longer always treated as 1.
  * JSON-RPC: listpeers was always reporting 0 for all stats.
  * JSON RPC: withdraw all says Cannot afford transaction if you have absolutely no funds, rather than Output 0 satoshis would be dust.
  * Protocol: don't send gossip about closed channels.
  * Protocol: fix occasional deadlock when both peers flood with gossip.
  * Protocol: fix occasional long delay on sending reply_short_channel_ids_end.
  * Protocol: re-send node_announcement when address/alias/color etc change.
  * Protocol: multiple HTLCs with the same payment_hash are handled correctly.
  * Options: 'autotor' defaults to port 9051 if not specified.

 -- Christian Decker <decker.christian@gmail.com>  Fri, 26 Oct 2018 12:12:00 -0400

lightningd (0.6.1-1) stable; urgency=medium

  * Protocol: gossipd now deliberately delays spamming with channel_update.
  * Protocol: liveness ping when we commit changes but peer is idle: speeds up failures and reduces forced closures.
  * Protocol: option_data_loss_protect now supported to protect peers against being out-of-date.
  * JSON API: Added description to invoices and payments (#1740).
  * JSON API: getinfo has new fields alias and color.
  * JSON API: listpeers has new fields global_features and local_features.
  * JSON API: listnodes has new field global_features.
  * JSON API: ping command to send a ping to a connected peer.
  * JSON API: feerates command to retrieve current fee estimates.
  * JSON API: withdraw and fundchannel can be given manual feerate.
  * Config: --conf option to set config file.
  * Documentation: Added CHANGELOG.md
  * pylightning: RpcError now has method and payload fields.
  * Sending lightningd a SIGHUP will make it reopen its log-file, if any.
  * Protocol: Fee estimates are now smoothed over time, to avoid sudden jumps.
  * Config: You can only announce one address if each type (IPv4, IPv6, TORv2, TORv3).
  * lightning-cli: the help command for a specific command now runs the man command.
  * HSM: The HSM daemon now maintains the per-peer secrets, rather than handing them out. It's still lax in what it signs though.
  * connectd: A new daemon lightning_connectd handles connecting to/from peers, instead of gossipd doing that itself. lightning_openingd now handles peers immediately, even if they never actually open a channel.
  * Test: python-xdist is now a dependency for tests.
  * Logging: JSON connections no longer spam debug logs.
  * Routing: We no longer consider channels that are not usable either because of their capacity or their htlc_minimum_msat parameter (#1777)
  * We now try to connect to all known addresses for a peer, not just the one given or the first one announced.
  * Crash logs are now placed one-per file like crash.log.20180822233752
  * We will no longer allow withdrawing funds or funding channels if we do not have a fee estimate (eg. bitcoind not synced); use new feerate arg.
  * JSON API: listpeers results no long have alias and color fields; they're in listnodes (we used to internally merge the information).
  * JSON API: listpeers will never have state field (it accidentally used to exist and set to GOSSIPING before we opened a channel). connected will indicate if we're connected, and the channels array indicates individual channel states (if any).
  * Config: default-fee-rate is no longer available; use explicit feerate option if necessary.
  * Removed all Deprecated options from 0.6.
  * Protocol: node_announcement multiple addresses are correctly ordered and uniquified.
  * Protocol: if we can't estimate feerate, be almost infinitely tolerant of other side setting fees to avoid unilateral close.
  * JSON API: listnodes: now displays node aliases and colors even if they don't advertise a network address
  * JSON API: fundchannel all: now restricts to 2^24-1 satoshis rather than failing.
  * JSON API: listnodes: now correctly prints addresses if more than one is advertised.
  * Config: bind-addr of a publicly accessible network address was announced.
  * When we reconnect and have to retransmit failing HTLCs, the errors weren't encrypted by us.
  * lightningd_config man page is now installed by make install.
  * Fixed crash when shutting down during opening a channel (#1737)
  * Don't lose track of our own output when applying penalty transaction (#1738)
  * Protocol: channel_update inside error messages now refers to correct channel.
  * Stripping type prefix from channel_updates that are nested in an onion reply to be compatible with eclair and lnd (#1730).
  * Failing tests no longer delete the test directory, to allow easier debugging (Issue: #1599)

 -- Christian Decker <decker.christian@gmail.com>  Wed, 12 Sep 2018 01:24:00 +0000

lightningd (0.6-1) stable; urgency=medium

  * While there are far too many new features in the 0.6 release to list, the following are the most interesting and impactful: Lightweight nodes: Previous releases required a full bitcoind node running alongside c-lightning, to provide access to the Bitcoin network. Thisrelease still requires the bitcoin-cli utility to be present, but it can now talk to remote nodes as well, including some lightweight nodes such as spruned. This makes it possible to run a c-lightning node on Raspberry Pis as well as other low-powered devices.
  * The gossip protocol has been updated to use a more lightweight bandwidth mechanism that asks for specific information, rather than exchanging full network views as the previous release did. This is particularly important for low-powered and mobile devices that would otherwise spend a lot of bandwidth and energy downloading and verifying information they already have.
  * API stability: The c-lightning JSON-RPC interface and supporting libraries have been redesigned in order to minimize changes in future releases. This API stability should make it easy for other projects to build on top of c-lightning because we will support this version of the API for the foreseeable future, maintaining backward compatibility, should we introduce any changes.
  * Wallet and sync: c-lightning now includes a full-fledged wallet that manages both on-chain and off-chain funds. There is no more raw transaction handling! All funds are automatically tracked and returned to the internalwallet as soon as possible, with no user interaction required. In addition the blockchain tracking now maintains an internal view of the blockchain,ending long blockchain rescans.
  * TOR support: c-lightning now supports connecting to nodes over the TOR network, auto-registering as a hidden service, and accepting incoming connections over TOR.
  * The payment logic has undergone a major overhaul to support automatic retries for routing failures, randomization of route selection, and better feedback about the current state of a payment.
  * And as always: performance, performance, performance.

 -- Christian Decker <decker.christian@gmail.com>  Sun, 05 Aug 2018 11:46:08 +0200
